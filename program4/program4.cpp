#include <iostream>
#include <thread>
#include <vector>
#include <fstream>
#include <iomanip>
#include <cstdlib>
#include <stdlib.h>
#include <assert.h>
#include <condition_variable>
#include <mutex>

using namespace std;

// Global Vars
mutex mt;
condition_variable cv;
int R;                     // Number of resources
int T;                     // Number of threads
vector<int> avail;         // avail[i]: instances of resource i available
vector<vector<int>> max;   // max[i][j]: max of resource i needed by thread j
vector<vector<int>> alloc; // alloc[i][j]: instances of resource i allocated to thread j
vector<vector<int>> need;  // need[i][j]: instances of resource i needed by thread j

// Autogenerated
// vector<int> safeSeq;       // safeSeq[i]: thread i in safe sequence

bool isSafe();
void request(int resourceId, int threadId);
bool wouldBeSafe(int resourceId, int threadId);

int main(int argc, char*argv[])
{
    if (argc<3)
    {
        cout << "Usage: " << argv[0] << " <R> <T>" << endl;
        return 1;
    }

    // Read in R and T
    const char* arg1= argv[1];
    const char* arg2= argv[2];
    R = atoi(arg1);
    T = atoi(arg2);

    // Initialize avail, max, alloc, need
    avail.resize(R);

    for (int i=0; i<R; i++)
    {
        cout << avail[i] << " ";
        cout << endl;
        cout << "wtf" << endl;
    }

    return 0;
}

// A state is safe iff there exists a safe sequence of grants that are sufficient
// to allow all threads to eventually receive their maximum resource needs.
void request(int resourceId, int threadId)
{
    unique_lock<mutex> lock(mt);

    // Grant request if safe, otherwise wait
    assert(isSafe());
    while (!wouldBeSafe(resourceId, threadId))
    {
        cv.wait(lock);
    }

    alloc[resourceId][threadId] += 1;
    avail[resourceId]--;
    assert(isSafe());
    
    // autogenerated for some reason??
    // cv.notify_all();
}

// Invariant: the system is in a safe state
bool isSafe()
{
    int j;
    vector<int> work = avail;   // note this is called toBEAvail in book

    return true;
}

// Hypothetically grant request and see if resulting state is safe.
bool wouldBeSafe(int resourceId, int threadId)
{
    return true;
}
